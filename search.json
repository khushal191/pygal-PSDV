[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Pygal: Elegant and Interactive Data Visualization in Python",
    "section": "",
    "text": "Pygal: Elegant and Interactive Data Visualization in Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Pygal: Elegant and Interactive Data Visualization in Python",
    "section": "",
    "text": "Visualizing Data with Pygal: A Beginner-Friendly Guide to Interactive Graphs in Python\nPygal is an open source user friendly Python Library that enables highly customizable SVG(Scalable Vector Graphics) charts. With it, you can generate charts that are perfect for web applications, reports and presentations. It integrates well with frameworks like FLash and Django and its output visualization is quick and elegant.\n\n\nInstallation and Setup\nUse package manager pip\n\n! pip install pygal\n\n\nimport into the script\nimport pygal\n\n\nIf you are in jupyter notebook:\n\n! pip install ipython\n\n\n! pip install cairosvg\n\n\n\nThen, configure your notebook:\n\nfrom IPython.display import SVG, display\ndef show_svg(svg):\n    display(SVG(svg.render()))\n\n\n\n\nKey Features & Explanation:\nWide Range of Chart Types: Supports bar: Pygal’s Bar chart allows you to plot data for different categories and add multiple series.\n\nline:\nLine charts are used to display information as a series of data points connected by straight lines.\n\n\npie:\nThey’re useful for displaying how different parts make up a total.\n\n\nradar:\nRadar charts display multivariate data on axes starting from the same point. They are good for comparing multiple variables.\n\n\nbox plots:\nBox plots are used to display the distribution of data based on five summary statistics: minimum, first quartile, median, third quartile, and maximum. and more.\n\n\nInteractive SVG Output:\nCharts are rendered as SVGs, making them scalable and interactive.\n\n\nCustomizable Styles:\nModify colors, labels, and tooltips to suit your needs.\n\n\nBrowser-Friendly:\nSVG charts can be easily embedded in web pages.\n\n\nExport Options:\nExport charts as PNG, PDF, or other formats using additional libraries.\n\n\n\nCreating Dynamic Charts with Pygal\nOne of Pygal’s key strengths is its ability to create dynamic charts by integrating with Python’s data structures. This enables charts to update automatically in response to real-time or changing datasets, making Pygal a great option for dashboards, reports, and web applications that need continuously updated data. example:\n\nimport pygal\n\ndata = {'Cats': [1, 2, 3], 'Dogs': [4, 5, 6]}\nbar_chart = pygal.Bar()\nfor key, values in data.items():\n    bar_chart.add(key, values)\nbar_chart.render_to_file('bar_chart.svg')\n\n\n\nExporting and Embedding Charts in Pygal\nOne of Pygal’s strengths is that it can export charts as SVG files, which stay clear and sharp at any size. Example:\n\nimport pygal\n\nbar_chart = pygal.Bar()\nbar_chart.add('Cats', [1, 2, 3])\nsvg_data = bar_chart.render()\n\nwith open('chart.html', 'w') as file:\n    file.write(f'&lt;html&gt;&lt;body&gt;{svg_data}&lt;/body&gt;&lt;/html&gt;')\n\n\n\nUse cases:\nWeb Dashboards: Embedding interactive charts for user analytics.\nData Reports: Creating professional-looking charts for business insights.\nEducational Content: Visualizing mathematical functions and data sets for teaching.\nScientific Research: Plotting experimental results interactively\n\n\nConclusion:\nPygal is an excellent choice for Python developers seeking quick, interactive, and visually appealing data visualizations. Its SVG output ensures charts look sharp at any size, making them perfect for both web and print. The simplicity of its API combined with a variety of chart types allows you to present data in the most effective and engaging way.\n\nUsing matplotlib:\n\nimport matplotlib.pyplot as plt\n\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nproduct_a = [150, 200, 220, 240, 300, 500, 450, 470, 490, 520, 580, 600]\nproduct_b = [100, 120, 140, 160, 200, 300, 350, 370, 400, 430, 450, 480]\n\nplt.figure(figsize=(10, 6))\nplt.plot(months, product_a, label='Product A', marker='o', linestyle='-', color='blue')\nplt.plot(months, product_b, label='Product B', marker='s', linestyle='--', color='orange')\n\nplt.title('Monthly Sales Data for Product A and Product B', fontsize=16)\nplt.xlabel('Month', fontsize=12)\nplt.ylabel('Sales', fontsize=12)\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.5)\n\nplt.tight_layout()\nplt.show()\n\n\n\nUsing pygal:\n\nimport pygal\n\nline_chart = pygal.Line()\nline_chart.title = 'Monthly Sales Data (2024)'\nline_chart.x_labels = map(str, range(1, 13))\nline_chart.add('Product A', [150, 200, 220, 240, 300, 500, 450, 470, 490, 520, 580, 600])\nline_chart.add('Product B', [100, 120, 140, 160, 200, 300, 350, 370, 400, 430, 450, 480])\nline_chart.render_to_file('line_chart.svg')\n\n\n\nUsing Matplotlib:\n\nimport matplotlib.pyplot as plt\n\nweeks = ['Week 1', 'Week 2', 'Week 3', 'Week 4']\nvisits = [3000, 4000, 3500, 5000]\n\nplt.figure(figsize=(8, 5))\nplt.bar(weeks, visits, color='skyblue')\n\nplt.title('Weekly Visits', fontsize=16)\nplt.xlabel('Week', fontsize=12)\nplt.ylabel('Number of Visits', fontsize=12)\nplt.grid(axis='y', linestyle='--', alpha=0.5)\n\nplt.tight_layout()\nplt.show()\n\n\n\nUsing Pygal:\n\nbar_chart = pygal.Bar()\nbar_chart.title = 'Website Visits per Week'\nbar_chart.x_labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4']\nbar_chart.add('Visits', [3000, 4000, 3500, 5000])\nbar_chart.render_to_file('bar_chart.svg')\n\n\n\nUsing Matplotlib:\n\nimport matplotlib.pyplot as plt\n\nlabels = ['Android', 'iOS', 'Others']\nsizes = [68.3, 30.3, 1.4]\ncolors = ['#66b3ff', '#ff9999', '#99ff99']\nexplode = (0.1, 0, 0)\n\nplt.figure(figsize=(8, 8))\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\n\nplt.title('Market Share of Mobile OS', fontsize=16)\n\nplt.tight_layout()\nplt.show()\n\n\n\nUsing Pygal:\n\nimport pygal\n\npie_chart = pygal.Pie()\npie_chart.title = 'Market Share of Mobile OS'\n\npie_chart.add('Android', 68.3)\npie_chart.add('iOS', 30.3)\npie_chart.add('Others', 1.4)\n\npie_chart.render_to_file('pie_chart.svg')\n\n\n\nUsing Matplotlib:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlabels = ['Python', 'Java', 'C++', 'JavaScript', 'SQL']\ndeveloper_a = [80, 65, 70, 90, 85]\ndeveloper_b = [60, 75, 85, 80, 70]\n\nangles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()\ndeveloper_a += developer_a[:1]\ndeveloper_b += developer_b[:1]\nangles += angles[:1]\n\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\n\nax.plot(angles, developer_a, label='Developer A', color='blue', linewidth=2)\nax.fill(angles, developer_a, color='blue', alpha=0.25)\n\nax.plot(angles, developer_b, label='Developer B', color='orange', linewidth=2)\nax.fill(angles, developer_b, color='orange', alpha=0.25)\n\nax.set_yticks([])\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\n\nplt.title('Skill Set Comparison', fontsize=16)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\n\nplt.tight_layout()\nplt.show()\n\n\n\nUsing Pygal:\n\nimport pygal\n\nradar_chart = pygal.Radar()\nradar_chart.title = 'Skill Set Comparison'\n\nradar_chart.x_labels = ['Python', 'Java', 'C++', 'JavaScript', 'SQL']\n\nradar_chart.add('Developer A', [80, 65, 70, 90, 85])\nradar_chart.add('Developer B', [60, 75, 85, 80, 70])\nradar_chart.render_to_file('radar_chart.svg')\n\n\n\nUsing Matplotlib:\n\nimport matplotlib.pyplot as plt\n\nscores = {\n    'Math': [45, 60, 75, 85, 95],\n    'Science': [50, 65, 70, 80, 90],\n    'History': [40, 55, 65, 75, 85]\n}\n\ndata = [scores['Math'], scores['Science'], scores['History']]\nlabels = list(scores.keys())\n\nplt.figure(figsize=(8, 6))\nplt.boxplot(data, labels=labels, patch_artist=True,\n            boxprops=dict(facecolor='skyblue', color='blue'),\n            medianprops=dict(color='red'),\n            whiskerprops=dict(color='blue'),\n            capprops=dict(color='blue'))\n\nplt.title('Exam Scores Distribution', fontsize=16)\nplt.ylabel('Scores', fontsize=12)\nplt.grid(axis='y', linestyle='--', alpha=0.5)\n\nplt.tight_layout()\nplt.show()\n\n\nRunning cells with 'Python 3.13.1' requires the ipykernel package.\n\nRun the following command to install 'ipykernel' into the Python environment. \n\nCommand: 'c:/Users/admin/AppData/Local/Programs/Python/Python313/python3.13t.exe -m pip install ipykernel -U --user --force-reinstall'\n\n\n\n\nUsing Pygal:\n\nimport pygal\n\nbox_plot = pygal.Box()\nbox_plot.title = 'Exam Scores Distribution'\n\nbox_plot.add('Math', [45, 60, 75, 85, 95])\nbox_plot.add('Science', [50, 65, 70, 80, 90])\nbox_plot.add('History', [40, 55, 65, 75, 85])\n\nbox_plot.render_to_file('box_plot.svg')\n\nPygal is an excellent choice for Python developers seeking quick, interactive, and visually appealing data visualizations. Its SVG output ensures charts look sharp at any size, making them perfect for both web and print. The simplicity of its API combined with a variety of chart types allows you to present data in the most effective and engaging way."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pygal : A visualisation Library",
    "section": "",
    "text": "Pygal Text!"
  }
]