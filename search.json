[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "Welcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Title\nVisualizing Data with Pygal: A Beginner-Friendly Guide to Interactive Graphs in Python\nPygal is an open source user friendly Python Library that enables highly customizable SVG(Scalable Vector Graphics) charts. With it, you can generate charts that are perfect for web applications, reports and presentations. It integrates well with frameworks like FLash and Django and its output visualization is quick and elegant.\nInstallation and Setup\nUse package manager pip\npip install pygalimport into the scriptimport pygalif in jupyter notebooks:pip install ipythonpip install cairosvgThen, configure your notebook:from IPython.display import SVG, displaydef show_svg(svg): display(SVG(svg.render()))\nKey Features & Explanation:\nWide Range of Chart Types: Supports bar: Pygal’s Bar chart allows you to plot data for different categories and add multiple series.line: Line charts are used to display information as a series of data points connected by straight lines.pie: They’re useful for displaying how different parts make up a total.radar: Radar charts display multivariate data on axes starting from the same point. They are good for comparing multiple variables.box plots: Box plots are used to display the distribution of data based on five summary statistics: minimum, first quartile, median, third quartile, and maximum.and more.Interactive SVG Output: Charts are rendered as SVGs, making them scalable and interactive.Customizable Styles: Modify colors, labels, and tooltips to suit your needs.Browser-Friendly: SVG charts can be easily embedded in web pages.Export Options: Export charts as PNG, PDF, or other formats using additional libraries.\nCreating Dynamic Charts with Pygal\nOne of Pygal’s key strengths is its ability to create dynamic charts by integrating with Python’s data structures. This enables charts to update automatically in response to real-time or changing datasets, making Pygal a great option for dashboards, reports, and web applications that need continuously updated data.example:import pygaldata = {‘Cats’: [1, 2, 3], ‘Dogs’: [4, 5, 6]}bar_chart = pygal.Bar()for key, values in data.items(): bar_chart.add(key, values)bar_chart.render_to_file(‘bar_chart.svg’)\nExporting and Embedding Charts in Pygal\nOne of Pygal’s strengths is that it can export charts as SVG files, which stay clear and sharp at any size.Example:import pygalbar_chart = pygal.Bar()bar_chart.add(‘Cats’, [1, 2, 3])svg_data = bar_chart.render()with open(‘chart.html’, ‘w’) as file: file.write(f’\n\n\n{svg_data}\n\n\n’)\nUse cases\nWeb Dashboards: Embedding interactive charts for user analytics.Data Reports: Creating professional-looking charts for business insights.Educational Content: Visualizing mathematical functions and data sets for teaching.Scientific Research: Plotting experimental results interactively\nConclusion:Pygal is an excellent choice for Python developers seeking quick, interactive, and visually appealing data visualizations. Its SVG output ensures charts look sharp at any size, making them perfect for both web and print. The simplicity of its API combined with a variety of chart types allows you to present data in the most effective and engaging way."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Quarto template Text!"
  }
]